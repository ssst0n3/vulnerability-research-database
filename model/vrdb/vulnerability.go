package vrdb

import (
	"github.com/ssst0n3/awesome_libs/awesome_error"
	"github.com/ssst0n3/lightweight_api"
	"github.com/ssst0n3/vulnerability-research-database/model/osv"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

type Vulnerability struct {
	gorm.Model
	SchemaVersion string      `json:"schema_version,omitempty"`
	ID            string      `json:"id"`
	Modified      *osv.Time   `json:"modified,omitempty"`
	Published     *osv.Time   `json:"published,omitempty"`
	Withdrawn     *osv.Time   `json:"withdrawn,omitempty"`
	Aliases       *Strings    `json:"aliases,omitempty"`
	Related       *Strings    `json:"related,omitempty"`
	Summary       string      `json:"summary,omitempty"`
	Details       string      `json:"details"`
	Severity      *Severities `json:"severity,omitempty"`
	Affected      *Affects    `json:"affected"`
	References    *References `json:"references,omitempty"`
	Credits       []Credit    `json:"credits,omitempty" gorm:"many2many:vulnerability_credits;"`
	// specific
	SummaryZH string      `json:"summary_zh,omitempty"`
	DetailsZH string      `json:"details_zh"`
	Analyses  []Analysis  `json:"analyses,omitempty" gorm:"many2many:vulnerability_analyses;"`
	Reproduce Environment `json:"reproduce,omitempty"`
	Exploits  []Exploit   `json:"exploits,omitempty"`
	Tags      []Tag       `json:"tags" gorm:"many2many:vulnerability_tags;"`
	ProjectID uint        `json:"project_id"`
	Project   Project     `json:"project" gorm:"foreignKey:ProjectID"`
	// references from github.com/ssst0n3/researcher-tracer
	ResearcherID uint `json:"researcher_id"`
}

var SchemaVulnerability schema.Schema

func init() {
	awesome_error.CheckFatal(lightweight_api.InitSchema(&SchemaVulnerability, &Vulnerability{}))
}

func New(o osv.Entry) *Vulnerability {
	aliases := Strings(o.Aliases)
	relates := Strings(o.Related)
	severities := Severities(o.Severity)
	affects := Affects(o.Affected)
	references := References(o.References)
	return &Vulnerability{
		SchemaVersion: o.SchemaVersion,
		ID:            o.ID,
		Modified:      o.Modified,
		Published:     o.Published,
		Withdrawn:     o.Withdrawn,
		Aliases:       &aliases,
		Related:       &relates,
		Summary:       o.Summary,
		Details:       o.Details,
		Severity:      &severities,
		Affected:      &affects,
		References:    &references,
		Credits:       NewCredits(o.Credits),
		SummaryZH:     o.DatabaseSpecific.SummaryZH,
		DetailsZH:     o.DatabaseSpecific.DetailsZH,
		Analyses:      NewAnalyses(o.DatabaseSpecific.Analyses),
		Reproduce:     *NewEnvironment(o.DatabaseSpecific.Reproduce),
		Exploits:      NewExploits(o.DatabaseSpecific.Exploits),
		Tags:          NewTags(o.DatabaseSpecific.Tags),
		ProjectID:     o.DatabaseSpecific.ProjectID,
		Project: Project{
			Project: o.DatabaseSpecific.Project,
		},
		ResearcherID: o.DatabaseSpecific.ResearcherID,
	}
}

func (v *Vulnerability) OSV() *osv.Entry {
	var credits []osv.Credit
	for _, credit := range v.Credits {
		credits = append(credits, credit.Credit)
	}
	var analyses []osv.Analysis
	for _, analysis := range v.Analyses {
		analyses = append(analyses, *analysis.OSV())
	}
	var exploits []osv.Exploit
	for _, exploit := range v.Exploits {
		exploits = append(exploits, *exploit.OSV())
	}
	var tags []osv.Tag
	for _, tag := range v.Tags {
		tags = append(tags, tag.Tag)
	}
	return &osv.Entry{
		SchemaVersion: v.SchemaVersion,
		ID:            v.ID,
		Modified:      v.Modified,
		Published:     v.Published,
		Withdrawn:     v.Withdrawn,
		Aliases:       *v.Aliases,
		Related:       *v.Related,
		Summary:       v.Summary,
		Details:       v.Details,
		Severity:      *v.Severity,
		Affected:      *v.Affected,
		References:    *v.References,
		Credits:       credits,
		DatabaseSpecific: &osv.Specific{
			SummaryZH:    v.SummaryZH,
			DetailsZH:    v.DetailsZH,
			Analyses:     analyses,
			Reproduce:    *v.Reproduce.OSV(),
			Exploits:     exploits,
			Tags:         tags,
			Project:      v.Project.Project,
			ResearcherID: v.ResearcherID,
		},
	}
}
